{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","userId","selectUser","handleChange","filter","className","type","id","name","placeholder","onChange","value","map","todo","key","completed","checked","title","onClick","request","url","options","fetch","then","response","json","result","data","getTodos","CurrentUser","state","user","this","loadData","prevProps","selectedUserId","props","a","setState","email","phone","clearUser","React","Component","App","query","event","target","pushTodos","normalizeQuery","toLocaleLowerCase","filtredTodos","includes","ReactDOM","render","document","getElementById"],"mappings":"2WAIaA,G,kBAAW,SAAC,GAAD,IACtBC,EADsB,EACtBA,MACAC,EAFsB,EAEtBA,OACAC,EAHsB,EAGtBA,WACAC,EAJsB,EAItBA,aACAC,EALsB,EAKtBA,OALsB,OAOtB,yBAAKC,UAAU,YACb,sCAEA,2BACEC,KAAK,OACLC,GAAG,eACHC,KAAK,QACLH,UAAU,QACVI,YAAY,mBACZC,SAAUP,IAGZ,4BACEO,SAAUP,EACVK,KAAK,SACLG,MAAOP,GAEP,4BAAQI,KAAK,SAASG,MAAM,OAA5B,OACA,4BAAQH,KAAK,SAASG,MAAM,UAA5B,UACA,4BAAQH,KAAK,SAASG,MAAM,aAA5B,cAGF,yBAAKN,UAAU,4BACb,wBAAIA,UAAU,kBACXL,EAAMY,KAAI,SAAAC,GAAI,OACb,wBACEC,IAAKD,EAAKN,GACVF,UAAS,wDAELQ,EAAKE,UACL,0BACA,4BAJK,mBAQT,+BACE,2BAAOT,KAAK,WAAWU,QAASH,EAAKE,YACrC,2BAAIF,EAAKI,QAEVJ,EAAKZ,SAAWA,EACf,4BACEI,UAAU,yCACVC,KAAK,SACLY,QAAS,WACPhB,EAAW,KAJf,YAQGW,EAAKZ,QAGR,4BACEI,UAAU,+BACVC,KAAK,SACLY,QAAS,WACPhB,EAAWW,EAAKZ,UAJpB,YAQGY,EAAKZ,iBCpETkB,EAAU,SAACC,EAAKC,GAAN,OAAkBC,MAAM,GAAD,OAFlC,kCAEkC,OAAUF,GAAOC,GAC5DE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SAEZC,EAAW,kBAAMT,EAAQ,WCDzBU,G,MAAb,4MACEC,MAAQ,CACNC,KAAM,MAFV,uDAKE,WACEC,KAAKC,aANT,gCASE,SAAmBC,GACbA,EAAUC,iBAAmBH,KAAKI,MAAMD,gBAC1CH,KAAKC,aAXX,6DAeE,4BAAAI,EAAA,sEDZqBpC,ECaQ+B,KAAKI,MAAMD,eDbThB,EAAQ,UAAD,OAAWlB,ICYjD,OACQ8B,EADR,OAGEC,KAAKM,SAAS,CAAEP,SAHlB,iCDZqB,IAAA9B,ICYrB,YAfF,0EAqBE,WACE,IAAQ8B,EAASC,KAAKF,MAAdC,KAER,OAAKA,EAKH,yBAAK1B,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEG0B,EAAK9B,SAIV,wBAAII,UAAU,qBAAqB0B,EAAKvB,MACxC,uBAAGH,UAAU,sBAAsB0B,EAAKQ,OACxC,uBAAGlC,UAAU,sBAAsB0B,EAAKS,OAExC,4BACElC,KAAK,SACLY,QAASc,KAAKI,MAAMK,UACpBpC,UAAU,UAHZ,eAhBK,kBAzBb,GAAiCqC,IAAMC,YC6FxBC,E,4MA1Fbd,MAAQ,CACN9B,MAAO,GACPmC,eAAgB,EAChBU,MAAO,GACPzC,OAAQ,O,EA8BVqC,UAAY,WACV,EAAKH,SAAS,CACZH,eAAgB,K,EAIpBhC,aAAe,SAAC2C,GACd,MAAwBA,EAAMC,OAAtBvC,EAAR,EAAQA,KAAMG,EAAd,EAAcA,MAEd,EAAK2B,SAAL,eACG9B,EAAOG,K,8FArCZ,4BAAA0B,EAAA,sEACsBT,IADtB,OACQ5B,EADR,OAGEgC,KAAKM,SAAS,CAAEtC,UAHlB,gD,6HAMA,8BAAAqC,EAAA,yDAIiB,SAFPjC,EAAW4B,KAAKF,MAAhB1B,QAFV,gCAKkBwB,IALlB,OAKI5B,EALJ,iBAQiB,WAAXI,EARN,gCASkBwB,IACXL,MAAK,SAAAG,GAAM,OAAIA,EAAOtB,QAAO,SAAAS,GAAI,OAAuB,IAAnBA,EAAKE,gBAVjD,OASIf,EATJ,iBAaiB,cAAXI,EAbN,kCAckBwB,IACXL,MAAK,SAAAG,GAAM,OAAIA,EAAOtB,QAAO,SAAAS,GAAI,OAAuB,IAAnBA,EAAKE,gBAfjD,QAcIf,EAdJ,eAkBEgC,KAAKgB,UAAUhD,GAlBjB,iD,6EAmCA,SAAUA,GACRgC,KAAKM,SAAS,CAAEtC,Y,oBAGlB,WAAU,IAAD,OACP,EAAiDgC,KAAKF,MAA9C9B,EAAR,EAAQA,MAAOmC,EAAf,EAAeA,eAAgBU,EAA/B,EAA+BA,MAAOzC,EAAtC,EAAsCA,OAEhC6C,EAAiBJ,EAAMK,oBACvBC,EAAenD,EAAMI,QACzB,SAAAS,GAAI,QAAMA,EAAKI,OACZJ,EAAKI,MAAMiC,oBAAoBE,SAASH,MAG7C,OACE,yBAAK5C,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEL,MAAOmD,EACP/C,OAAQA,EACRD,aAAc6B,KAAK7B,aACnBF,OAAQkC,EACRjC,WAAY,SAACD,GACX,EAAKqC,SAAS,CAAEH,eAAgBlC,QAKtC,yBAAKI,UAAU,gBACb,yBAAKA,UAAU,0BACZ8B,EACC,kBAAC,EAAD,CACEA,eAAgBA,EAChBM,UAAWT,KAAKS,YAEhB,0B,GAnFEC,IAAMC,WCHxBU,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7e51d04e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  userId,\n  selectUser,\n  handleChange,\n  filter,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <input\n      type=\"text\"\n      id=\"search-query\"\n      name=\"query\"\n      className=\"input\"\n      placeholder=\"Type search word\"\n      onChange={handleChange}\n    />\n\n    <select\n      onChange={handleChange}\n      name=\"filter\"\n      value={filter}\n    >\n      <option name=\"filter\" value=\"all\">All</option>\n      <option name=\"filter\" value=\"active\">Active</option>\n      <option name=\"filter\" value=\"completed\">Completed</option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={`\n              TodoList__item\n              ${todo.completed\n              ? 'TodoList__item--checked'\n              : 'TodoList__item--unchecked'\n              }\n            `}\n          >\n            <label>\n              <input type=\"checkbox\" checked={todo.completed} />\n              <p>{todo.title}</p>\n            </label>\n            {todo.userId === userId ? (\n              <button\n                className=\"button TodoList__user-button--selected\"\n                type=\"button\"\n                onClick={() => {\n                  selectUser(0);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            ) : (\n              <button\n                className=\"button TodoList__user-button\"\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            )\n              }\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf().isRequired,\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","const API = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${API}${url}`, options)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return 'Wait please';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={this.props.clearUser}\n          className=\"button\"\n        >\n          Clear User\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    filter: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  async componentDidUpdate() {\n    let todos;\n    const { filter } = this.state;\n\n    if (filter === 'all') {\n      todos = await getTodos();\n    }\n\n    if (filter === 'active') {\n      todos = await getTodos()\n        .then(result => result.filter(todo => todo.completed === false));\n    }\n\n    if (filter === 'completed') {\n      todos = await getTodos()\n        .then(result => result.filter(todo => todo.completed === true));\n    }\n\n    this.pushTodos(todos);\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  pushTodos(todos) {\n    this.setState({ todos });\n  }\n\n  render() {\n    const { todos, selectedUserId, query, filter } = this.state;\n\n    const normalizeQuery = query.toLocaleLowerCase();\n    const filtredTodos = todos.filter(\n      todo => !!todo.title\n      && todo.title.toLocaleLowerCase().includes(normalizeQuery),\n    );\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filtredTodos}\n            filter={filter}\n            handleChange={this.handleChange}\n            userId={selectedUserId}\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}